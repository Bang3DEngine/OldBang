#include <vector>
#include <string>
#include <iostream>

#include <QTextStream>

#include "glm/glm.hpp"

#include "Bang.h"

#include "SingletonManager.h"
#include "ShaderProgram.h"
#include "MeshRenderer.h"
#include "Application.h"
#include "Framebuffer.h"
#include "GameObject.h"
#include "FileReader.h"
#include "Behaviour.h"
#include "Texture2D.h"
#include "XMLParser.h"
#include "XMLNode.h"
#include "Camera.h"
#include "Canvas.h"
#include "Shader.h"
#include "Timer.h"

#ifdef BANG_EDITOR

#include "EditorScene.h"
#include "WindowMain.h"
#include "WindowMainAutoGenerated.h"

#else

#include "GameWindow.h"

#endif

#include "String.h"

int main(int argc, char *argv[])
{
    String str = "hola, esto, es una, lista, muy bonita, huehue";
    //str = "";
    str = "w,o,l,o,l,o,o,oooooo";
    std::cerr << "str: " << str << std::endl;
    std::cerr << str.Length() << std::endl;
    std::cerr << str.SubString(0, 0) << std::endl;
    std::cerr << str.SubString(0, 1) << std::endl;
    std::cerr << str.SubString(0, 2) << std::endl;
    std::cerr << str.SubString(0, 3) << std::endl;
    std::cerr << str.Split(',', true) << std::endl;

    if (str.Contains("oooooo"))
    {
        std::cerr << "YES" << std::endl;
    }
    else
    {
        std::cerr << "NO" << std::endl;
    }
    return 0;

    /*
    Application app(argc, argv);
    SingletonManager::InitSingletonMangerFromMainBinary();

    QMainWindow *window = new QMainWindow();

    #ifdef BANG_EDITOR

    QFont font;
    font.setFamily(font.defaultFamily());
    font.setPixelSize(10);
    app.setFont(font);

    WindowMain::InitFromMainBinary(window, &app);

    #else

    GameWindow::InitFromMainBinary(window, &app);

    #endif

    Canvas::InitFromMainBinary();
    Time::InitFromMainBinary();
    Input::InitFromMainBinary();

    #ifdef BANG_EDITOR

    // Load dark Window theme
    QFile f("Assets/Engine/qdarkstyle/style.qss");
    if (!f.exists())
    {
        Logger_Error("Unable to set dark stylesheet, stylesheet not found.");
    }
    else
    {
        f.open(QFile::ReadOnly | QFile::Text);
        QTextStream ts(&f);
        app.setStyleSheet(ts.readAll());
    }
    //

    Scene *scene = new EditorScene();
    std::string filename = "./Assets/Scenes/test.bscene";
    FileReader::ReadScene(filename, scene);
    if (scene)
    {
        Canvas::GetInstance()->AddScene(scene);
        Canvas::GetInstance()->SetCurrentScene(scene);
        Persistence::SetCurrentSceneFilepath(filename);
    }

    #else

    Scene *scene = new Scene();
    std::string filename = "./Assets/Scenes/test.bscene";
    FileReader::ReadScene(filename, scene);
    if (scene)
    {
        Canvas::GetInstance()->AddScene(scene);
        Canvas::GetInstance()->SetCurrentScene(scene);
        Persistence::SetCurrentSceneFilepath(filename);
    }
    #endif

    return app.exec();
    */
}
